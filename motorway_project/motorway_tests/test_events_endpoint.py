from django.test import TestCase
from rest_framework.test import APIClient
from rest_framework import status
from django.urls import reverse
import json
import pytest


@pytest.mark.django_db
class TestEventsEndpoint():
    """
    Testing the /api/events endpoint
    """

    client = APIClient()

    # Motorway Tweet Converter
    json_payload = {
        "closest_cities": [
            "Stafford (N)",
            "Stoke / Newcastle-u-Lyme"
        ],
        "direction": "n",
        "extra_information": [],
        "event_id": 1052482906797428737,
        "junction": [14, 15],
        "metadata": "Event Generated by Tweet Miner at 2018-10-20T20:50:12.286910",
        "motorway": 6,
        "reason": "congestion",
        "time_day_numerical": 17,
        "time_day_worded": "Wed",
        "time_hour": 8,
        "time_minutes": 54,
        "time_seconds": 13,
        "time_timestamp": "2018-10-17T08:54:13",
        "time_year": 2018
    }

    get_url = reverse("events-retrievedestroy",
                      kwargs={"pk": 1052482906797428737})

    def post_event(self):
        '''
        After every test the db is wiped
        '''
        return self.client.post(
            reverse('create'),
            data=self.json_payload,
            format="json"
        )

    def test_post_event_successful(self):
        response = self.post_event()
        assert response.status_code == status.HTTP_201_CREATED

    def test_get_event_successful(self):
        self.post_event()
        response = self.client.get(self.get_url)
        assert response.status_code == status.HTTP_200_OK

    def test_delete_event_successful(self):
        self.post_event()
        response = self.client.delete(self.get_url)
        assert response.status_code == status.HTTP_204_NO_CONTENT
