from django.test import TestCase
from rest_framework.test import APIClient
from rest_framework import status
from django.urls import reverse
import json
import pytest


@pytest.mark.django_db
class TestEventsEndpoint():
    """
    Testing the /api/events endpoint
    """

    client = APIClient()
    closest_cities = [
        "Stafford (N)",
        "Stoke / Newcastle-u-Lyme"
    ]
    direction = "n"
    extra_information = []
    event_id = 1052482906797428737
    junction = [14, 15]
    metadata = "Event Generated by Tweet Miner at 2018-10-20T20:50:12.286910"
    motorway = 6
    reason = "congestion"
    time_day_numerical = 17
    time_day_worded = "Wed"
    time_hour = 8
    time_minutes = 54
    time_seconds = 13
    time_timestamp = "2018-10-17T08:54:13"
    time_year = 2018

    # Motorway Tweet Converter
    json_payload = {
        "closest_cities": closest_cities,
        "direction": direction,
        "extra_information": extra_information,
        "event_id": event_id,
        "junction": junction,
        "metadata": metadata,
        "motorway": motorway,
        "reason": reason,
        "time_day_numerical": time_day_numerical,
        "time_day_worded": time_day_worded,
        "time_hour": time_hour,
        "time_minutes": time_minutes,
        "time_seconds": time_seconds,
        "time_timestamp": time_timestamp,
        "time_year": time_year
    }

    get_url = reverse("events-retrievedestroy",
                      kwargs={"pk": 1052482906797428737})

    def post_event(self):
        '''
        After every test the db is wiped
        '''
        return self.client.post(
            reverse('create'),
            data=self.json_payload,
            format="json"
        )

    def test_post_event_successful(self):
        response = self.post_event()
        assert response.status_code == status.HTTP_201_CREATED

    def test_get_event_successful(self):
        self.post_event()
        response = self.client.get(self.get_url)
        assert response.status_code == status.HTTP_200_OK

    def test_delete_event_successful(self):
        self.post_event()
        response = self.client.delete(self.get_url)
        assert response.status_code == status.HTTP_204_NO_CONTENT

    def test_events_all_endpoint(self):
        self.post_event()
        response = self.client.get(self.get_url)
        data = response.data
        assert self.closest_cities == data['closest_cities']
        assert self.direction == data['direction']
        #assert self.extra_information == data['extra_information']
        assert self.event_id == data['event_id']
        assert self.junction == data['junction']
        assert self.metadata == data['metadata']
        assert self.motorway == data['motorway']
        assert self.reason == data['reason']
        assert self.time_day_numerical == data['time_day_numerical']
        assert self.time_day_worded == data['time_day_worded']
        assert self.time_hour == data['time_hour']
        assert self.time_minutes == data['time_minutes']
        assert self.time_seconds == data['time_seconds']
        assert self.time_timestamp == data['time_timestamp']
        assert self.time_year == data['time_year']
