from rest_framework.test import APIClient
from requests import post, get
from django.urls import reverse
from os import getenv
import json

class Event():

    def __init__(self, **kwargs):
        """
        Provide default arguments for an event
        """
        self.closest_cities = kwargs.get('closest_cities', [
            "Stafford (N)",
            "Stoke / Newcastle-u-Lyme"
        ])
        self.direction = kwargs.get('direction', "n")
        self.event_id = kwargs.get('event_id', 1052482906797428737)
        self.junction = kwargs.get('junction', [14, 15])
        self.metadata = kwargs.get(
            'metadata', "Event Generated by Tweet Miner at 2018-10-20T20:50:12.286910")
        self.motorway = kwargs.get('motorway', 6)
        self.reason = kwargs.get('reason', "congestion")
        self.time_day_numerical = kwargs.get('time_day_numerical', 17)
        self.time_day_worded = kwargs.get('time_day_worded', "Wed")
        self.time_hour = kwargs.get('time_hour', 8)
        self.time_minutes = kwargs.get('time_minutes', 54)
        self.time_seconds = kwargs.get('time_seconds', 13)
        self.time_timestamp = kwargs.get(
            'time_timestamp', "2018-10-17T08:54:13Z")
        self.time_year = kwargs.get('time_year', 2018)

    def build_payload(self):
        payload = {
            "closest_cities": self.closest_cities,
            "direction": self.direction,
            "event_id": self.event_id,
            "junction": self.junction,
            "metadata": self.metadata,
            "motorway": self.motorway,
            "reason": self.reason,
            "time_day_numerical": self.time_day_numerical,
            "time_day_worded": self.time_day_worded,
            "time_hour": self.time_hour,
            "time_minutes": self.time_minutes,
            "time_seconds": self.time_seconds,
            "time_timestamp": self.time_timestamp,
            "time_year": self.time_year
        }
        return payload


class APIRequests():

    def __init__(self):
        self.base_url = 'http://localhost:8000'
        self.token_ep = '/oauth2/token/'
        self.all_ep = reverse('events-all') # Protected EP
        self.post_ep = reverse('create-filter')

    def get_auth_token(self):
        url = self.base_url + self.token_ep
        client_id = getenv('TEST_CLIENT_ID', 'test_id')
        client_secret = getenv('TEST_CLIENT_SECRET', 'test_secret')
        grant_type = "client_credentials"

        request = post(url,  # Request Auth token
                       data="grant_type={0}&client_id={1}&client_secret={2}"
                       .format(grant_type, client_id, client_secret),
                       headers={'Content-Type': 'application/x-www-form-urlencoded'})

        if request.status_code != 200:
            raise ValueError

        content = json.loads(request.content)
        return content['access_token']

    def get_all_ep(self):
        url = self.base_url + self.all_ep
        token = self.get_auth_token()
        response = get(url, headers={'Authorization': "Bearer {}".format(token)})
        return response.content

    def post_event(self, json_payload):
        url = self.base_url + self.post_ep
        request = post(url, data=json_payload, headers={'Content-Type': 'application/json'})
        return request.status_code